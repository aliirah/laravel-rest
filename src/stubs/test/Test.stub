<?php

namespace Tests\Feature\{{ model }};

use App\Models\{{ model }};
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;

class {{ model }}Test extends TestCase
{
    use RefreshDatabase;

    protected $dataStruct;
    protected $testData;
    protected ${{ modelLower }};

    public function setUp(): void
    {
        parent::setUp();

        $this->dataStruct = [
            'id',
            // TODO Enter fields that return from {{ model }}Resource
            // e.g title
            'createdAt'
        ];

        $this->testData = [
            // TODO Enter test data for store and update methods
            // e.g 'title' => 'title'
        ];

        {{ model }}::factory(10)->create();
        $this->{{ modelLower }} = {{ model }}::inRandomOrder()->first();
    }

    public function test_index()
    {
        $response = $this->json('get', '/api/{{ modelLowerPlural }}');

        $response->assertStatus(Response::HTTP_OK)
            ->assertJsonStructure([
                'data' => [
                    $this->dataStruct
                ]
            ]);
    }

    public function test_store()
    {
        $response = $this->json('post', '/api/{{ modelLowerPlural }}', $this->testData);

        $response->assertStatus(Response::HTTP_ACCEPTED)
            ->assertJsonStructure([
                'data' => $this->dataStruct
            ])->assertJson([
                'data' => $this->testData
            ]);
    }

    public function test_show()
    {
        $response = $this->json('get', "/api/{{ modelLowerPlural }}/{$this->{{ modelLower }}->id}");

        $response->assertStatus(Response::HTTP_OK)
            ->assertJsonStructure([
                'data' => $this->dataStruct
            ]);
    }

    public function test_update()
    {
        $response = $this->json('put', "/api/{{ modelLowerPlural }}/{$this->{{ modelLower }}->id}", $this->testData);

        $response->assertStatus(Response::HTTP_ACCEPTED)
            ->assertJsonStructure([
                'data' => $this->dataStruct
            ])->assertJson([
                'data' => $this->testData
            ]);
    }

    public function test_delete()
    {
        $response = $this->json('delete', "/api/{{ modelLowerPlural }}/{$this->{{ modelLower }}->id}");

        $response->assertStatus(Response::HTTP_ACCEPTED);
    }
}
